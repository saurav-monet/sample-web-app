require_relative "plugin"

PluginPG.run("create table if not exists list_items (
  id      serial primary key,
  title   varchar(40),
  checked boolean
)")

class ListItem
  attr_reader :id, :title, :checked, :error

  def initialize(params)
    @id      ||= params[:id]
    @title   ||= params[:title]
    @checked ||= params[:checked]
    @error   ||= params[:error]
  end

  def check
    self.class.plugin_db.exec('UPDATE list_items SET checked = true WHERE id = $1', @id)
    @checked = true
  end

  def uncheck
    self.class.plugin_db.exec('UPDATE list_items SET checked = false WHERE id = $1', @id)
    @checked = false
  end

  def update_title(title)
    self.class.plugin_db.exec('UPDATE list_items SET title = $1 WHERE id = $2', title, @id)
  end

  def destroy
    self.class.plugin_db.exec('DELETE FROM list_items WHERE id = $1', @id)
  end

  def valid?
    @error.nil?
  end


  def self.plugin_db
    PluginPG
  end

  def self.all
    plugin_db.query("SELECT * FROM list_items ORDER BY id DESC")
  end

  def self.find(id)
    result = plugin_db.query("SELECT * FROM list_items WHERE id = $1", id).first
    if result
      new({ id: result[:id], title: result[:title], checked: result[:checked] })
    end
  end

  def self.create(params = {})
    validates(params) do |result|
      if result[:error].nil?
        title   = params[:title]
        checked = params[:checked].to_i == 1
        resultID = self.plugin_db.exec("INSERT INTO list_items (title, checked) VALUES ($1, $2)", title, checked)
        new({ id: resultID, title: title, checked: checked })
      else
        new({ error: result[:error] })
      end
    end
  end

  def self.validates(params)
    if params.nil? || params[:title].nil?
      yield({ error: 'Title cannot be empty' })
    elsif params[:title].empty?
      yield({ error: 'Title cannot be empty' })
    else
      if params[:title].length > 40
        yield({ error: 'Title too long (should less than 40 characters)' })
      else
        yield({})
      end
    end
  end
end
